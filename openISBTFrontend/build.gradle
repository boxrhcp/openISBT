group 'de.tuberlin.mcc'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.3.31'

    repositories {
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.45"
    }
}

apply plugin: 'kotlin2js'
apply plugin: 'org.jetbrains.kotlin.frontend'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    //compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0-M1"
    //compile "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.3.0-M1"
    //compile "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.3.0-M1"
}

kotlinFrontend {

    downloadNodeJsVersion = 'latest'

    npm {
        dependency "kotlin"
        dependency "faker"
        dependency "json-schema-faker"
    }

    webpackBundle {
        bundleName = "main"
        sourceMapEnabled = false    // enable/disable source maps
        contentPath = file('web') // a file that represents a directory to be served by dev server)
        publicPath = "/"  // web prefix
        host = "localhost" // dev server host
        port = 80  // dev server port
        //stats = "errors-only"  // log level
    }
}


compileKotlin2Js.kotlinOptions.metaInfo = true
compileKotlin2Js.kotlinOptions.outputFile = "${projectDir}/web/js/openISBTFrontend.js"
compileKotlin2Js.kotlinOptions.sourceMap = true
compileKotlin2Js.kotlinOptions.moduleKind = "commonjs"
compileKotlin2Js.kotlinOptions.main = "call"

compileKotlin2Js.kotlinOptions.suppressWarnings = false
compileKotlin2Js.kotlinOptions.verbose = true
compileKotlin2Js.kotlinOptions.sourceMapEmbedSources = "always"



build.doLast {
    // Copy kotlin.js and kotlin-meta.js from jar into web directory
    configurations.compile.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "${projectDir}/web/js/lib"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }

    copy {
        includeEmptyDirs = false
        from "${buildDir}/resources/main"
        into "${projectDir}/web"
    }

    //copy {
    //    includeEmptyDirs = false
    //    from "${buildDir}/bundle"
    //    into "${projectDir}/web/js/lib"
    //}
}

clean.doFirst {
    delete "${projectDir}/web"
}