{
  "openapi": "3.0.0",
  "info": {
    "title": "RealMQ client api",
    "version": "0.1.0",
    "description": "## Getting Started\n\n* Get in touch with us to get an account set up. You can do that by sending an email to service@realmq.com\n* We'll provide you with an `accessToken` with admin scope that allows you to create further users and access tokens.\n* Paste the `accessToken` into the access token input field in the header of the api browser.\n* There are two access groups (**scopes**). Every API endpoint has a description of what scopes are allowed to perform requests.\n  - **admin** Full management capabilities, administration capabilities\n  - **user** Restricted access\n\n## API Resources\n\n* **Users**: A user may be a human, a bot, a sensor, a server etc. and is able to participate in channel communications.\n* **Channels**: A channel is a message gateway and broadcasts a message, data, event etc. to all its users.\n* **Subscriptions**: A subscription describes the access rights of users on channels.\n* **Auth Tokens**: A token is issued for one user and grants scope specific Rest- & Realtime API access rights.\n\n## Custom Ids\n\n* In order to provide optimal integratability, you can work with custom ids on channels, users, subscriptions and auth-tokens.\n* When creating these resources, you can pass an `id` property to the payload.\n* You can then reference the resource by its custom id: eg. `GET /users/test-bot-1`.\n* Valid ids must match `^[\\w-]+$` (**alpha-numeric**, **-**, **_**).\n* If you do not provide a custom id, a UUIDv4 will be generated by default.\n\n## Error Responses\n\n| Status Code | Error Code | Error Message |\n| --- | --- | --- |\n| **400 - Bad Request** | `InvalidRequestSchema` | Request validation failed: Parameter (offset) is not a valid integer: INVALID_INPUT. |\n|                       | `AlreadySubscribed` | The subscription could not be created, since the given user is already subscribed to the channel. |\n|                       | `AuthTokenAlreadyExists` | The auth token could not be created, since a token with the same id already exists. |\n|                       | `ChannelAlreadyExists` | The channel could not be created, since a channel with the same id already exists.. |\n|                       | `InvalidAuthToken` | Patch cannot be applied, since the resulting auth token won't be valid. |\n|                       | `InvalidChannel` | Patch cannot be applied, since the resulting channel won't be valid. |\n|                       | `InvalidPatch` | The given payload is no valid JSON-Patch document. |\n|                       | `InvalidSubscription` | Patch cannot be applied, since the resulting subscription won't be valid. |\n|                       | `InvalidUser` | Patch cannot be applied, since the resulting user won't be valid. |\n|                       | `SubscriptionAlreadyExists` | The subscription could not be created, since a subscription with the same id already exists. |\n|                       | `UserAlreadyExists` | The user could not be created, since a user with the same id already exists. |\n| **401 - Unauthorized** | `InvalidAuthorization` | Missing or invalid authorization header. |\n| **403 - Forbidden** | `InsufficientPrivileges` | Insufficient rights to access or manipulate the requested resource. |\n| **404 - Not Found** | `EndpointNotFound` | The requested API endpoint does not exist. |\n|                     | `UnknownAuthToken` | The requested auth token does not exist. |\n|                     | `UnknownChannel` | The requested channel does not exist. |\n|                     | `UnknownSubscription` | The requested subscription does not exist. |\n|                     | `UnknownUser` | The requested user does not exist. |\n| **500 - Internal Server Error** | `InternalServerError` | Your request could not be processed. |\n",
    "contact": {}
  },
  "servers": [
    {
      "url": "//api.realmq.com/client/v1"
    }
  ],
  "paths": {
    "/version": {
      "get": {
        "security": [],
        "operationId": "fetchVersion",
        "tags": [
          "Info"
        ],
        "responses": {
          "200": {
            "description": "Current version, see https://semver.org for format.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "version"
                  ]
                }
              },
              "version": {
                "examples": {
                  "response": {
                    "value": "1.0.0"
                  }
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Retrieve one single user.",
        "description": "Find a user by its id.\n\n#### Allowed Scopes\n**admin**\n",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "The user was loaded sucessfully.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The user could not be retrieved due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to retrieve this user."
          },
          "404": {
            "description": "The requested user does not exist."
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The user id.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w-]+$"
            }
          }
        ]
      },
      "delete": {
        "summary": "Delete the given user.",
        "description": "Delete a user referenced by id.\nThis will also delete all subscriptions and auth tokens of the user.\n\n#### Allowed Scopes\n**admin**\n",
        "tags": [
          "Users"
        ],
        "responses": {
          "204": {
            "description": "The user has been deleted sucessfully."
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The user could not be deleted due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to delete users."
          },
          "404": {
            "description": "The requested user does not exist."
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The user id.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w-]+$"
            }
          }
        ]
      },
      "patch": {
        "summary": "Perform a json-patch update on a user.",
        "description": "Update user properties via JSON-patch [(RFC6902)](http://tools.ietf.org/html/rfc6902).\n\n#### Allowed Scopes\n**admin**\n",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/JsonPatchDocumentArray"
        },
        "responses": {
          "200": {
            "description": "The updated user.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The user could not be updated due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to update this user."
          },
          "404": {
            "description": "The requested user does not exist."
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The user id.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w-]+$"
            }
          }
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "Search and list users.",
        "description": "Get paginated user listing.\n\n#### Allowed Scopes\n**admin**\n",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/paginationOffset"
          },
          {
            "$ref": "#/components/parameters/paginationLimit"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of users was successfully retrieved.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserList"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The users could not be listed due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to list users."
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Create a new user.\n\n#### Allowed Scopes\n**admin**\n",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UserCreation",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "description": "Custom Id",
                    "type": "string",
                    "pattern": "^[\\w-]+$"
                  },
                  "properties": {
                    "description": "A map of custom properties.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User was created successfully.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed or the user could not be created since a user with the same id already exists.\nError codes are: **UserAlreadyExists**.\n",
            "content": {
              "*/*": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RequestError"
                    },
                    {
                      "example": {
                        "code": "UserAlreadyExists",
                        "message": "A user with the same id already exists."
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The user could not be created due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to create a user."
          }
        },
        "parameters": []
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "summary": "Retrieve one single subscription.",
        "description": "Find a subscription by its id.\n\n#### Allowed Scopes\n**admin**, **user**\n",
        "tags": [
          "Subscriptions"
        ],
        "responses": {
          "200": {
            "description": "The subscription was loaded sucessfully.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The subscription could not be retrieved due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to retrieve this subscription."
          },
          "404": {
            "description": "The requested subscription does not exist."
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The subscription id.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w-]+$"
            }
          }
        ]
      },
      "patch": {
        "summary": "Perform a json-patch update on a subscription.",
        "description": "Update subscription properties via JSON-patch [(RFC6902)](http://tools.ietf.org/html/rfc6902).\nOnly replace operations on `allowRead` and `allowWrite` are permitted.\n\n#### Allowed Scopes\n**admin**\n",
        "tags": [
          "Subscriptions"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/JsonPatchDocumentArray"
        },
        "responses": {
          "200": {
            "description": "The updated subscription.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The subscription could not be updated due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to update this subscription."
          },
          "404": {
            "description": "The requested subscription does not exist."
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The subscription id.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w-]+$"
            }
          }
        ]
      },
      "delete": {
        "summary": "Delete the given subscription.",
        "description": "Delete a subscription referenced by id.\n\n#### Allowed Scopes\n**admin**\n",
        "tags": [
          "Subscriptions"
        ],
        "responses": {
          "204": {
            "description": "The subscription has been deleted sucessfully."
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The subscription could not be deleted due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to delete this subscription."
          },
          "404": {
            "description": "The requested subscription does not exist."
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The subscription id.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w-]+$"
            }
          }
        ]
      }
    },
    "/subscriptions": {
      "get": {
        "summary": "Search and list subscriptions.",
        "description": "Get paginated subscription listing.\nWhen requested with an **admin** token, it will list **all** subscriptions.\nOtherwise it will list only the subscriptions of the token owning user.\n\n#### Allowed Scopes\n**admin**, **user**\n",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/paginationOffset"
          },
          {
            "$ref": "#/components/parameters/paginationLimit"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of subscriptions was successfully retrieved.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionList"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The subscriptions could not be listed due to failed authorization."
          }
        }
      },
      "post": {
        "summary": "Create a subscription",
        "description": "Create a new subscription - grant a user access to a channel.\n\n#### Allowed Scopes\n**admin**\n",
        "tags": [
          "Subscriptions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "SubscriptionCreation",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "description": "Custom Id",
                    "type": "string",
                    "pattern": "^[\\w-]+$"
                  },
                  "channelId": {
                    "description": "The id of an existing channel.",
                    "type": "string",
                    "pattern": "^[\\w-]+$"
                  },
                  "userId": {
                    "description": "The id of an existing user.",
                    "type": "string",
                    "pattern": "^[\\w-]+$"
                  },
                  "allowRead": {
                    "description": "Boolean flag that indicates whether the user has **read access** to the channel.",
                    "type": "boolean",
                    "default": false
                  },
                  "allowWrite": {
                    "description": "Boolean flag that indicates whether the user has **write access** to the channel.",
                    "type": "boolean",
                    "default": false
                  }
                },
                "example": {
                  "id": "some-channel_some-user",
                  "channelId": "some-channel",
                  "userId": "some-user",
                  "allowRead": true,
                  "allowWrite": true
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Subscription was created successfully.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed or the subscription could not be created\ndue to unmet constraints like the user is already subscribed to the\nchannel or a subscription with the same id already exists.\n\nPossible error codes are: **AlreadySubscribed** and **SubscriptionAlreadyExists**.\n",
            "content": {
              "*/*": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RequestError"
                    },
                    {
                      "example": {
                        "code": "SubscriptionAlreadyExists",
                        "message": "A subscription with the same id already exists."
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The subscription could not be created due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to create a subscription."
          }
        },
        "parameters": []
      }
    },
    "/me/user": {
      "get": {
        "summary": "Get current user.",
        "description": "Load the user that owns the given access token.\n\n#### Allowed Scopes\n**admin**, **user**\n",
        "tags": [
          "Me",
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User was loaded successfully.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "The user resource could not be retrieved due to failed authorization."
          }
        },
        "parameters": []
      }
    },
    "/me/auth/token": {
      "get": {
        "summary": "Retrieve the auth token passed as bearer header.",
        "description": "Retrieve the auth token object that has been passed as bearer token within the request header.\n\n#### Allowed Scopes\n**admin**, **user**\n",
        "tags": [
          "Auth",
          "Me"
        ],
        "responses": {
          "200": {
            "description": "The auth token was loaded sucessfully.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthToken"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The auth token could not be retrieved due to failed authorization."
          }
        },
        "parameters": []
      }
    },
    "/channels/{channelId}/messages": {
      "get": {
        "summary": "Retrieve persisted messages published on channel.",
        "description": "Look up persisted messages of channel. The total amount of messages stored depends\non channel settings (`featues.persistence.enabled` and `featues.persistence.duration`).\n\nMessages are sorted from newer to older so newer ones will be returned before older ones.\nSetting the `to` parameter to a past time will result in a stable result set.\n\nThis resource is accessible in admin scope without restircitons. With user scope a\nsubscription covering the channel and read permissions are required.\n\n#### Allowed Scopes\n**admin**, **user**\n",
        "tags": [
          "Channels"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/paginationOffset"
          },
          {
            "$ref": "#/components/parameters/paginationLimit"
          },
          {
            "name": "from",
            "description": "Inclusive lower time boundary to filter items by.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dateTime"
            }
          },
          {
            "name": "to",
            "description": "Exclusive upper time boundary to filter items by.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dateTime"
            }
          },
          {
            "name": "channelId",
            "description": "The channel id.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w-]+$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records was successfully retrieved.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelMessageList"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The channel messages could not be retrieved due to failed authorization."
          },
          "404": {
            "description": "The requested channel is not accessible."
          }
        }
      }
    },
    "/channels/{id}": {
      "get": {
        "summary": "Retrieve one single channel.",
        "description": "Find a channel by its id.\n\n#### Allowed Scopes\n**admin**, **user**\n",
        "tags": [
          "Channels"
        ],
        "responses": {
          "200": {
            "description": "The channel was loaded sucessfully.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The channel could not be retrieved due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to retrieve this channel."
          },
          "404": {
            "description": "The requested channel does not exist."
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The channel id.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w-]+$"
            }
          }
        ]
      },
      "patch": {
        "summary": "Perform a json-patch update on a channel.",
        "description": "Update channel properties via JSON-patch [(RFC6902)](http://tools.ietf.org/html/rfc6902).\n\n#### Allowed Scopes\n**admin**\n",
        "tags": [
          "Channels"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/JsonPatchDocumentArray"
        },
        "responses": {
          "200": {
            "description": "The updated channel.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          },
          "401": {
            "description": "The channel could not be updated due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to update this channel."
          },
          "404": {
            "description": "The requested channel does not exist."
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The channel id.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w-]+$"
            }
          }
        ]
      },
      "delete": {
        "summary": "Delete the given channel.",
        "description": "Delete a channel referenced by id.\nThis will also delete all subscriptions on this channel.\n\n#### Allowed Scopes\n**admin**\n",
        "tags": [
          "Channels"
        ],
        "responses": {
          "204": {
            "description": "The channel has been deleted sucessfully."
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The channel could not be deleted due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to delete this channel."
          },
          "404": {
            "description": "The requested channel does not exist."
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The channel id.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w-]+$"
            }
          }
        ]
      }
    },
    "/channels": {
      "get": {
        "summary": "Search and list channels.",
        "description": "Get paginated channel listing.\n\n#### Allowed Scopes\n**admin**, **user**\n",
        "tags": [
          "Channels"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/paginationOffset"
          },
          {
            "$ref": "#/components/parameters/paginationLimit"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of channels was successfully retrieved.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelList"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The channels could not be listed due to failed authorization."
          }
        }
      },
      "post": {
        "summary": "Create a channel",
        "description": "Create a new channel.\n\n#### Allowed Scopes\n**admin**\n",
        "tags": [
          "Channels"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelCreation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Channel was created successfully.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed or the channel could not be created since a\nchannel with the same id already exists.\nError codes are: **ChannelAlreadyExists**.\n",
            "content": {
              "*/*": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RequestError"
                    },
                    {
                      "example": {
                        "code": "ChannelAlreadyExists",
                        "message": "A channel with the same id already exists."
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The channel could not be created due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to create the channel."
          }
        },
        "parameters": []
      }
    },
    "/auth/tokens/{id}": {
      "get": {
        "summary": "Retrieve one single auth token.",
        "description": "Find an auth token by its id.\n\n#### Allowed Scopes\n**admin**, **user**\n",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "The auth token was loaded sucessfully.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthToken"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The auth token could not be retrieved due to failed authorization."
          },
          "404": {
            "description": "The requested auth token does not exist."
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The auth token id.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w-]+$"
            }
          }
        ]
      },
      "delete": {
        "summary": "Delete the auth token referenced by id.",
        "description": "Delete the auth token and invalidates the session.\n\n#### Allowed Scopes\n**admin**, **user**\n",
        "tags": [
          "Auth"
        ],
        "responses": {
          "204": {
            "description": "Auth token has been deleted successfully."
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The auth token could not be deleted due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to delete this auth token."
          },
          "404": {
            "description": "The requested auth token does not exist."
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The auth token id.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w-]+$"
            }
          }
        ]
      },
      "patch": {
        "summary": "Perform a json-patch update on an auth token.",
        "description": "Update auth token via JSON-patch [(RFC6902)](http://tools.ietf.org/html/rfc6902).\n\n#### Patchable fields\n**description**\n\n#### Allowed Scopes\n**admin**, **user**\n",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/JsonPatchDocumentArray"
        },
        "responses": {
          "200": {
            "description": "The updated auth token.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthToken"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The auth token could not be updated due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to update this auth token."
          },
          "404": {
            "description": "The requested auth token does not exist."
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The auth token id.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w-]+$"
            }
          }
        ]
      }
    },
    "/auth/tokens": {
      "get": {
        "summary": "Search and list auth tokens.",
        "description": "List all auth tokens of the current user, or account-wide if the request is performed as admin.\n\n#### Allowed Scopes\n**admin**, **user**\n",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/paginationOffset"
          },
          {
            "$ref": "#/components/parameters/paginationLimit"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of auth tokens was successfully retrieved.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenList"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed."
          },
          "401": {
            "description": "The auth tokens could not be listed since the authorization failed."
          }
        }
      },
      "post": {
        "summary": "Create a new auth token.",
        "description": "Create a new auth token and passively create a new user if not existing yet.\nAuth tokens can only be created when requesting with an admin scoped token.\n\n#### User Referencing\nIf you want to create an auth token for an existing user you have to pass its id as **userId**.\n\n**NOTE**: For unknown userId's or without providing a userId, a user is created and referenced on the fly.\n\n#### Allowed Scopes\n**admin**\n",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "AuthTokenCreation",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "description": "The custom Id of the auth token.",
                    "type": "string",
                    "pattern": "^[\\w-]+$"
                  },
                  "userId": {
                    "description": "The custom id of a user, that will be created if not yet existing.",
                    "type": "string",
                    "pattern": "^[\\w-]+$"
                  },
                  "scope": {
                    "description": "The scope of the access token. Valid are user (default) and admin.",
                    "type": "string",
                    "enum": [
                      "admin",
                      "user"
                    ]
                  },
                  "description": {
                    "description": "An optional description text for better human auth token identification.",
                    "type": "string"
                  }
                },
                "example": {
                  "scope": "user",
                  "userId": "540001"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Auth token was successfully created.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthToken"
                }
              }
            }
          },
          "400": {
            "description": "Request validation failed or the auth token could not be created\nsince an auth token with the same id already exists.\n\nError codes are: **AuthTokenAlreadyExists**.\n",
            "content": {
              "*/*": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RequestError"
                    },
                    {
                      "example": {
                        "code": "AuthTokenAlreadyExists",
                        "message": "An auth token with the same id already exists."
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The auth token could not be created due to failed authorization."
          },
          "403": {
            "description": "Insufficient access rights to create the auth token."
          }
        },
        "parameters": []
      }
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Manage authorization and authentication."
    },
    {
      "name": "Channels",
      "description": "Manage channels."
    },
    {
      "name": "Info",
      "description": "Information about the API."
    },
    {
      "name": "Me",
      "description": "Manage resources represented by the authenticated client."
    },
    {
      "name": "Subscriptions",
      "description": "Manage user access on channels."
    },
    {
      "name": "Users",
      "description": "Manage users."
    }
  ],
  "security": [
    {
      "authTokenScheme": []
    }
  ],
  "components": {
    "parameters": {
      "paginationOffset": {
        "name": "offset",
        "in": "query",
        "description": "Retrieve items of paginated starting at this offset.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      },
      "paginationLimit": {
        "name": "limit",
        "in": "query",
        "description": "Maximum items in pagination list.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        }
      }
    },
    "requestBodies": {
      "JsonPatchDocumentArray": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchDocument"
              }
            }
          }
        },
        "description": "JSON-Patch request as defined by [RFC 6902](http://tools.ietf.org/html/rfc6902).",
        "required": true
      }
    },
    "securitySchemes": {
      "authTokenScheme": {
        "type": "apiKey",
        "description": "The authTokenScheme is a plain bearer token authentication. To authenticate\nsend a header like this: `Authorization: Bearer `.\n",
        "name": "Authorization",
        "in": "header"
      }
    },
    "schemas": {
      "CustomId": {
        "title": "Custom Id",
        "description": "Custom Id",
        "type": "string",
        "pattern": "^[\\w-]+$"
      },
      "CustomProperties": {
        "title": "Custom Properties",
        "description": "A map of custom properties.",
        "type": "object",
        "additionalProperties": true
      },
      "RequestError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ]
      },
      "JsonPatchDocument": {
        "description": "A JSONPatch document as defined by [RFC 6902](http://tools.ietf.org/html/rfc6902)",
        "required": [
          "op",
          "path"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "add",
              "remove",
              "replace",
              "move",
              "copy",
              "test"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer"
          },
          "value": {
            "description": "The value to be used within the operations."
          },
          "from": {
            "type": "string",
            "description": "A string containing a JSON Pointer value."
          }
        }
      },
      "TimestampsTrait": {
        "type": "object",
        "properties": {
          "createdAt": {
            "description": "Datetime of entity creation.",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "Datetime of entity last modification.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "createdAt",
          "updatedAt"
        ]
      },
      "BaseEntity": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The Id of the entity",
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "BaseList": {
        "type": "object",
        "properties": {
          "total": {
            "description": "Absolute number of items available.",
            "type": "integer"
          },
          "count": {
            "description": "Number of items in the list.",
            "type": "integer"
          },
          "offset": {
            "description": "Current offset from beginning of the total result set.",
            "type": "integer"
          },
          "limit": {
            "description": "Maximum list size.",
            "type": "integer"
          },
          "items": {
            "description": "The result list of entities.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseEntity"
            }
          }
        },
        "required": [
          "total",
          "count",
          "offset",
          "limit",
          "items"
        ]
      },
      "AuthToken": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEntity"
          },
          {
            "properties": {
              "scope": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              },
              "token": {
                "type": "string"
              },
              "isOnline": {
                "description": "Whether the access token is currently connected to the real time broker.",
                "type": "boolean",
                "readOnly": true
              },
              "description": {
                "description": "An optional description of the auth token for better identification.",
                "type": "string"
              }
            },
            "required": [
              "scope",
              "userId",
              "token",
              "isOnline"
            ]
          },
          {
            "$ref": "#/components/schemas/TimestampsTrait"
          }
        ]
      },
      "AuthTokenList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthToken"
                }
              }
            },
            "required": [
              "items"
            ]
          }
        ]
      },
      "Channel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEntity"
          },
          {
            "properties": {
              "features": {
                "$ref": "#/components/schemas/ChannelFeatures"
              },
              "properties": {
                "type": "object"
              }
            },
            "required": [
              "properties"
            ]
          },
          {
            "$ref": "#/components/schemas/TimestampsTrait"
          }
        ]
      },
      "ChannelCreation": {
        "title": "ChannelCreation",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CustomId"
          },
          "properties": {
            "$ref": "#/components/schemas/CustomProperties"
          },
          "features": {
            "$ref": "#/components/schemas/ChannelFeatures"
          }
        }
      },
      "ChannelFeatures": {
        "type": "object",
        "properties": {
          "persistence": {
            "$ref": "#/components/schemas/ChannelFeaturePersistence"
          }
        }
      },
      "ChannelFeaturePersistence": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Flag to switch message persistence on/off."
          },
          "duration": {
            "type": "string",
            "pattern": "^\\d+[smhd]$",
            "description": "Time interval to persist messages published on channel. If not set messages will be\npersisted forever. Supported units: s, m, h, d\n"
          }
        }
      },
      "ChannelList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            },
            "required": [
              "items"
            ]
          }
        ]
      },
      "ChannelMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEntity"
          },
          {
            "properties": {
              "content": {
                "type": "string",
                "description": "Raw message encoded in base64."
              }
            },
            "required": [
              "content"
            ]
          }
        ]
      },
      "ChannelMessageList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChannelMessage"
                }
              }
            },
            "required": [
              "items"
            ]
          }
        ]
      },
      "Subscription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEntity"
          },
          {
            "properties": {
              "channelId": {
                "type": "string",
                "readOnly": true
              },
              "userId": {
                "type": "string",
                "readOnly": true
              },
              "allowRead": {
                "type": "boolean"
              },
              "allowWrite": {
                "type": "boolean"
              }
            },
            "required": [
              "channelId",
              "userId",
              "allowRead",
              "allowWrite"
            ]
          },
          {
            "$ref": "#/components/schemas/TimestampsTrait"
          }
        ]
      },
      "SubscriptionList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            },
            "required": [
              "items"
            ]
          }
        ]
      },
      "User": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEntity"
          },
          {
            "properties": {
              "isOnline": {
                "description": "Whether the user is currently connected to the real time broker.",
                "type": "boolean",
                "readOnly": true
              },
              "properties": {
                "type": "object"
              }
            },
            "required": [
              "properties",
              "isOnline"
            ]
          },
          {
            "$ref": "#/components/schemas/TimestampsTrait"
          }
        ]
      },
      "UserList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseList"
          },
          {
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "required": [
              "items"
            ]
          }
        ]
      }
    },
    "links": {},
    "callbacks": {}
  }
}