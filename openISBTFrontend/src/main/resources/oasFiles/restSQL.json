{
  "openapi": "3.0.0",
  "info": {
    "version": "0.8.12",
    "title": "restSQL Web Service",
    "description": "restSQL is an open-source, ultra-lightweight data access layer for HTTP clients",
    "license": {
      "name": "MIT",
      "url": "http://restsql.org/doc/License.html"
    }
  },
  "tags": [
    {
      "name": "data",
      "description": "Data access"
    },
    {
      "name": "admin",
      "description": "Administration"
    },
    {
      "name": "doc",
      "description": "Documentation"
    }
  ],
  "paths": {
    "/res/{resName}": {
      "get": {
        "tags": [
          "data"
        ],
        "description": "Returns rows for SQL Resource matching query parameters. See [ResGetQuery API doc](http://restsql.org/doc/ref/ResGetQuery.html) for examples.\n* Example: /res/sdk.film.Film?year=2010\n* Example: /res/sdk.film.Film?_limit=100&_offset=0\n\nNote: Each column name, or configured column alias, specified in the resource definition is available for query, however you will not be able to enter those in this Swagger interface.",
        "operationId": "ResGetQuery",
        "parameters": [
          {
            "name": "_limit",
            "in": "query",
            "required": false,
            "description": "Limits number of records in response. Must be paired with _offset. See [ResGetQuery API doc](http://restsql.org/doc/ref/ResGetQuery.html) for detail.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "_offset",
            "in": "query",
            "required": false,
            "description": "Sets the start row in response, where the fit row is zero. Must be paired with _limit. See [ResGetQuery API doc](http://restsql.org/doc/ref/ResGetQuery.html) for detail.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "$ref": "#/components/parameters/outputParam"
          },
          {
            "$ref": "#/components/parameters/resNameParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ReadResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Invalid SQL Resource name",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "SQL Exception / database error",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "data"
        ],
        "description": "Creates row using URL-encoded form params or one or more rows in an XML or JSON body. See [ResPostUrlEnc API doc](http://restsql.org/doc/ref/ResPostUrlEnc.html) or [ResPostXmlOrJson API doc](http://restsql.org/doc/ref/ResPostXmlOrJson.html) for detail. For hierarchical SQL Resources, parents and children must be added in separate requests.\n* Example: POST /res/sdk.film.Film, Form URL Encoded request body - title=The%20Fox&year=2018&language_id=1\n* Example: POST /res/sdk.film.Film, JSON request body - { \"films\":[ { \"title\": \"The Fox\", \"year\": 2018, \"language_id\": 1 } ] }\n* Example: POST /res/sdk.film.Film/, XML request body - ",
        "operationId": "ResPostQuery",
        "parameters": [
          {
            "$ref": "#/components/parameters/resNameParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ResPostQueryBody"
        },
        "responses": {
          "200": {
            "description": "Normal response includes affected rows and data created as an array of SQL Resource-specific objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponseExt"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponseExt"
                }
              }
            }
          },
          "404": {
            "description": "Invalid SQL Resource name",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "SQL Exception / database error",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "data"
        ],
        "description": "Updates rows using query params and URL-encoded form params. See [ResPutQueryUrlEnc API doc](http://restsql.org/doc/ref/ResPutQueryUrlEnc.html) for detail.\n* Example: PUT /res/sdk.film.Film?title=%25Fox%25, Form URL Encoded body - year=2017\nThis updates the year for all films with titles containing Fox.\n\nOr rows specified in a XML or JSON body. For hierarchical SQL Resources, parents and children must be updated in separate requests. See [ResPutXmlOrJson API doc](http://restsql.org/doc/ref/ResPutXmlOrJson.html) for detail.\n* Example: PUT /res/sdk.film.Film, Form URL Encoded request body - id=1001&title=Grey%20Fox&year=2017\n* Example: PUT /res/sdk.film.Film, JSON request body - { \"films\":[ { \"id\": \"1001\", \"title\": \"Grey Fox\", \"year\": 2017 } ] }\n* Example: PUT /res/sdk.film.Film/, XML request body - ",
        "operationId": "ResPutQuery",
        "parameters": [
          {
            "$ref": "#/components/parameters/resNameParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "description": "Array of SQL Resource-specific objects"
              }
            },
            "application/xml": {
              "schema": {
                "type": "string",
                "description": "Array of SQL Resource-specific objects"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "string",
                "description": "Array of SQL Resource-specific objects"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Invalid SQL Resource name",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "SQL Exception / database error",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "data"
        ],
        "description": "Deletes one or more rows using query params. See [ResDeleteQuery API doc](http://restsql.org/doc/ref/ResDeleteQuery.html) for detail.\n* Example: DELETE /res/sdk.film.Film?title=Red%20Fox.\n\nNote: Each column name, or configured column alias, specified in the resource definition is available for query, however you will not be able to enter those in this Swagger interface.\n\nOr deletes all rows in an XML or JSON body. See [ResDeleteXmlOrJson API doc](http://restsql.org/doc/ref/ResDeleteXmlOrJson.html) for detail.\n* Example: DELETE /res/sdk.film.Film, JSON request body - {\"films\": [ { \"id\": 1001 }, { \"id\": 1002 } ] }\n* Example: DELETE /res/sdk.film.Film/, XML request body - ",
        "operationId": "ResDeleteQuery",
        "parameters": [
          {
            "$ref": "#/components/parameters/resNameParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ResDeleteQueryBody"
        },
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid SQL Resource name",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "SQL Exception / database error",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/res/{resName}/{resId}": {
      "get": {
        "tags": [
          "data"
        ],
        "description": "Returns row for SQL Resource matching primary key. See [ResGetPath API doc](http://restsql.org/doc/ref/ResGetPath.html) for detail.\n* Example: /res/sdk.film.Film/1001",
        "operationId": "ResGetPath",
        "parameters": [
          {
            "$ref": "#/components/parameters/resIdParam"
          },
          {
            "$ref": "#/components/parameters/resNameParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ReadResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid SQL Resource name",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "SQL Exception / database error",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "data"
        ],
        "description": "Creates children rows using XML or JSON body for hierarchical SQL Resources. See [ResPostPathXmlOrJson API doc](http://restsql.org/doc/ref/ResPostPathXmlOrJson.html) for detail.",
        "operationId": "ResPostPath",
        "parameters": [
          {
            "$ref": "#/components/parameters/resNameParam"
          },
          {
            "$ref": "#/components/parameters/resIdParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ResDeleteQueryBody"
        },
        "responses": {
          "200": {
            "description": "Normal response includes affected rows and data created as an array of SQL Resource-specific objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponseExt"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponseExt"
                }
              }
            }
          },
          "404": {
            "description": "Invalid SQL Resource name",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "SQL Exception / database error",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "data"
        ],
        "description": "Updates specific row using URL-encoded form params. See [ResPutPathUrlEnc API doc](http://restsql.org/doc/ref/ResPutPathUrlEnc.html)\n Or updates multiple child rows using XML or JSON body for hierarchical SQL Resources. See [ResPutPathXmlOrJson API doc](http://restsql.org/doc/ref/ResPutPathXmlOrJson.html) for detail.",
        "operationId": "ResPutPath",
        "parameters": [
          {
            "$ref": "#/components/parameters/resNameParam"
          },
          {
            "$ref": "#/components/parameters/resIdParam"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ResPostQueryBody"
        },
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Invalid SQL Resource name",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "SQL Exception / database error",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "data"
        ],
        "description": "Deletes specific row by primary key. See [ResDeletePath API doc](http://restsql.org/doc/ref/ResDeletePath.html) for detail.\n* Example: DELETE /res/sdk.film.Film/1001\n\nFor hierarchical SQL Resources, deletes all children contained in the XML or JSON body. See [ResDeletePathXmlOrJson API doc](http://restsql.org/doc/ref/ResDeletePathXmlOrJson.html) for detail.",
        "operationId": "ResByResNameAndResIdDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/resNameParam"
          },
          {
            "$ref": "#/components/parameters/resIdParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/xml": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "Array of SQL Resource-specific objects"
        },
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WriteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invalid SQL Resource name",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "SQL Exception / database error",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/xml": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/conf/system": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Returns general restSQL framework configuration",
        "operationId": "ConfSystem",
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/conf/log": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Returns logging configuration",
        "operationId": "ConfLog",
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/conf/security": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Returns security configuration",
        "operationId": "ConfSecurity",
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/conf/definition/{resName}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Returns SQL Resource definition (from user-provided XML file) definition",
        "operationId": "ConfDefinitionByResName",
        "parameters": [
          {
            "$ref": "#/components/parameters/resNameParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SqlResource"
                }
              }
            }
          },
          "404": {
            "description": "Invalid SQL Resource name",
            "content": {
              "application/xml": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/conf/documentation/{resName}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Returns SQL Resource documentation",
        "operationId": "ConfDocumentationByResName",
        "parameters": [
          {
            "$ref": "#/components/parameters/resNameParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response"
          },
          "404": {
            "description": "Invalid SQL Resource name",
            "content": {
              "text/html": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/conf/metadata/{resName}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Returns SQL Resource MetaData as undetood by restSQL nMetaData",
        "operationId": "ConfMetaDataByResName",
        "parameters": [
          {
            "$ref": "#/components/parameters/resNameParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SqlResourceMetaData"
                }
              }
            }
          },
          "404": {
            "description": "Invalid SQL Resource name",
            "content": {
              "application/xml": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/conf/reload/{resName}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Reloads SQL Resource definition (from user-provided XML file)",
        "operationId": "ConfReloadByResName",
        "parameters": [
          {
            "$ref": "#/components/parameters/resNameParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Invalid SQL Resource name",
            "content": {
              "text/plain": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/log": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Returns browsable list of current and rollover access, error and trace log files, if any",
        "operationId": "Log",
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/log/access": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Returns current access log",
        "operationId": "LogAccess",
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/log/error": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Returns current error log",
        "operationId": "LogError",
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/log/trace": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Returns current trace log",
        "operationId": "LogTrace",
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/monitoring/metrics": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Returns summary statistics such as number of requests, erro and average response times",
        "operationId": "MonitoringMetrics",
        "parameters": [
          {
            "name": "pretty",
            "in": "query",
            "required": false,
            "description": "Pretty formatting",
            "schema": {
              "type": "boolean",
              "default": "true"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/monitoring/ping": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Responds with pong. Useful to monitor service health.",
        "operationId": "MonitoringPing",
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/monitoring/healthcheck": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Returns db connection health",
        "operationId": "MonitoringHealthcheck",
        "parameters": [
          {
            "name": "pretty",
            "in": "query",
            "required": false,
            "description": "Pretty formatting",
            "schema": {
              "type": "boolean",
              "default": "true"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/monitoring/threads": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Shows all current thread stack traces",
        "operationId": "MonitoringThreads",
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/wadl": {
      "get": {
        "tags": [
          "doc"
        ],
        "description": "Returns restSQL WADL, an XML-based API description",
        "operationId": "Wadl",
        "responses": {
          "200": {
            "description": "Normal response",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": []
      }
    }
  },
  "servers": [
    {
      "url": "/restsql"
    }
  ],
  "components": {
    "parameters": {
      "outputParam": {
        "name": "_output",
        "in": "query",
        "required": false,
        "description": "Alternate method to Accept header to specific content type. See [Media Types API doc](http://restsql.org/doc/ref/ResMediaTypes.html) for detail.",
        "schema": {
          "type": "string"
        }
      },
      "resNameParam": {
        "name": "resName",
        "in": "path",
        "required": true,
        "description": "SQL Resource name",
        "schema": {
          "type": "string",
          "default": "sdk.film.Film"
        }
      },
      "resIdParam": {
        "name": "resId",
        "in": "path",
        "required": true,
        "description": "Primary key value. Note: Multiple path values allowed for multi-valued primary key.",
        "schema": {
          "type": "long",
          "default": 1001
        }
      }
    },
    "requestBodies": {
      "ResPostQueryBody": {
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            }
          },
          "application/xml": {
            "schema": {
              "type": "string"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "Array of SQL Resource-specific objects",
        "required": true
      },
      "ResDeleteQueryBody": {
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            }
          },
          "application/xml": {
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "Array of SQL Resource-specific objects",
        "required": true
      }
    },
    "schemas": {
      "ReadResponse": {
        "type": "object",
        "xml": {
          "name": "readResponse"
        },
        "properties": {
          "rowSet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReadResponseObject"
            },
            "xml": {
              "name": "resourceName"
            }
          }
        }
      },
      "ReadResponseObject": {
        "type": "object",
        "properties": {
          "column-name1": {
            "type": "integer",
            "xml": {
              "attribute": true
            }
          },
          "column-name2": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "column-name3": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "column-nameX": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "WriteRequest": {
        "type": "object",
        "xml": {
          "name": "request"
        },
        "properties": {
          "rowSet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReadResponseObject"
            },
            "xml": {
              "name": "resourceName"
            }
          }
        }
      },
      "WriteResponse": {
        "type": "object",
        "xml": {
          "name": "writeResponse"
        },
        "properties": {
          "rowsAffected": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "WriteResponseExt": {
        "type": "object",
        "xml": {
          "name": "writeResponse"
        },
        "properties": {
          "rowsAffected": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "attribute": true
            }
          },
          "rowSet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReadResponseObject"
            },
            "xml": {
              "name": "resourceName"
            }
          }
        }
      },
      "SqlResource": {
        "type": "object",
        "xml": {
          "name": "sqlResource"
        },
        "properties": {
          "query": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetaData"
          },
          "http": {
            "$ref": "#/components/schemas/HttpConfig"
          },
          "documentation": {
            "$ref": "#/components/schemas/Documentation"
          }
        }
      },
      "Database": {
        "type": "object",
        "properties": {
          "default": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "Table": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "alias": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "rowAlias": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "rowSetAlias": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "role": {
            "type": "string",
            "enum": [
              "Parent",
              "ParentExtension",
              "Child",
              "ChildExtension",
              "Join"
            ],
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "MetaData": {
        "type": "object",
        "properties": {
          "database": {
            "$ref": "#/components/schemas/Database"
          },
          "table": {
            "$ref": "#/components/schemas/Table"
          }
        }
      },
      "HttpResponse": {
        "type": "object",
        "properties": {
          "cacheControl": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "HttpConfig": {
        "type": "object",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/HttpResponse"
          }
        }
      },
      "SqlResourceMetaData": {
        "type": "object",
        "xml": {
          "name": "sqlResourceMetaData"
        },
        "properties": {
          "resName": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "hierarchical": {
            "type": "boolean",
            "xml": {
              "attribute": true
            }
          },
          "multipleDatabases": {
            "type": "boolean",
            "xml": {
              "attribute": true
            }
          },
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableMetaData"
            },
            "xml": {
              "wrapped": true
            }
          },
          "parentTable": {
            "type": "string"
          },
          "childTable": {
            "type": "string"
          },
          "joinTable": {
            "type": "string"
          },
          "parentPlusExtTables": {
            "$ref": "#/components/schemas/TableName"
          },
          "childPlusExtTables": {
            "$ref": "#/components/schemas/TableName"
          },
          "joinTables": {
            "$ref": "#/components/schemas/TableName"
          },
          "allReadColumns": {
            "$ref": "#/components/schemas/ColumnName"
          },
          "parentReadColumns": {
            "$ref": "#/components/schemas/ColumnName"
          },
          "childReadColumns": {
            "$ref": "#/components/schemas/ColumnName"
          },
          "documentation": {
            "$ref": "#/components/schemas/Documentation"
          }
        }
      },
      "TableName": {
        "type": "object",
        "properties": {
          "table": {
            "type": "string"
          }
        }
      },
      "ColumnName": {
        "type": "object",
        "properties": {
          "column": {
            "type": "string"
          }
        }
      },
      "TableMetaData": {
        "type": "object",
        "properties": {
          "databaseName": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "tableName": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "tableAlias": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "qualifiedTableName": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "tableRole": {
            "type": "string",
            "enum": [
              "Child",
              "ChildExtension",
              "Join",
              "Parent",
              "ParentExtension",
              "Unknown"
            ],
            "xml": {
              "attribute": true
            }
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnMetaData"
            },
            "xml": {
              "wrapped": true
            }
          },
          "primaryKeys": {
            "$ref": "#/components/schemas/ColumnName"
          }
        }
      },
      "ColumnMetaData": {
        "type": "object",
        "properties": {
          "tableName": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "readOnly": {
            "type": "boolean",
            "xml": {
              "attribute": true
            }
          },
          "qualifiedTableName": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "qualifiedColumnName": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "primaryKey": {
            "type": "boolean",
            "xml": {
              "attribute": true
            }
          },
          "nonqueriedForeignKey": {
            "type": "boolean",
            "xml": {
              "attribute": true
            }
          },
          "databaseName": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "columnTypeName": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "columnType": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "attribute": true
            }
          },
          "columnNumber": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "attribute": true
            }
          },
          "columnName": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "columnLabel": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "Documentation": {
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/DocResource"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocColumn"
            },
            "xml": {
              "wrapped": true
            }
          },
          "examples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocExample"
            },
            "xml": {
              "wrapped": true
            }
          }
        }
      },
      "DocColumn": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "description": {
            "type": "string"
          }
        }
      },
      "DocExample": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/DocRequest"
          },
          "response": {
            "$ref": "#/components/schemas/DocResponse"
          }
        }
      },
      "DocResource": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          }
        }
      },
      "DocHeader": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "value": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "DocRequest": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "uri": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "contentType": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "accept": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "user": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "password": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocHeader"
            },
            "xml": {
              "wrapped": true
            }
          },
          "body": {
            "type": "string"
          }
        }
      },
      "DocResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "attribute": true
            }
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocHeader"
            },
            "xml": {
              "wrapped": true
            }
          },
          "body": {
            "type": "string"
          }
        }
      }
    },
    "links": {},
    "callbacks": {}
  },
  "security": []
}